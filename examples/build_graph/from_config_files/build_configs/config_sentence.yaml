version: "1"
name: "sentence_splitter"
template_: "SimpleKGPipeline"
neo4j_config:
  params_:
    uri:
      resolver_: ENV
      var_: NEO4J_URI
    user:
      resolver_: ENV
      var_: NEO4J_USERNAME
    password:
      resolver_: ENV
      var_: NEO4J_PASSWORD

embedder_config:
  default:
    class_: OpenAIEmbeddings
    params_:
      api_key:
        resolver_: ENV
        var_: OPENAI_API_KEY

llm_config:
  default:
    class_: OpenAILLM
    params_:
      api_key:
        resolver_: ENV
        var_: OPENAI_API_KEY
      model_name: "gpt-4o-mini"
      model_params:
        temperature: 0
        max_tokens: 2000
        response_format:
          type: json_object

extras:
  database: neo4j
  embeddings:
    provider: openai
    model: text-embedding-ada-002
  llm:
    provider: openai
    model: gpt-4
    temperature: 0

component_config:
  splitter:
    class_: text_splitters.sentence_splitter.SentenceTextSplitter
    params_:
      chunk_size: 2000
      chunk_overlap: 200

  embedder:
    class_: embeddings.openai.OpenAIEmbeddings
    params_:
      model: text-embedding-ada-002
      batch_size: 128

  builder:
    class_: lexical_graph.LexicalGraphBuilder
    params_:
      config:
        chunk_node_label: TextChunk
        embedding_property: embedding

  writer:
    class_: kg_writer.Neo4jWriter
    params_:
      driver:
        resolver_: CONFIG_KEY
        key_: neo4j_config.default
      neo4j_database:
        resolver_: CONFIG_KEY
        key_: extras.database

connection_config:
  - start: splitter
    end: embedder
    input_config:
      text_chunks: splitter
  - start: embedder
    end: builder
    input_config:
      text_chunks: embedder
  - start: builder
    end: writer
    input_config:
      graph: builder.graph
      lexical_graph_config: builder.config 